Perl LLRP/XML support and test suite

Contributed By Impinj, Inc.

The Perl LLRP-XML packages are a programmer friendly way to
experiment with and test LLRP RFID readers.

Likely other LTK language-specific APIs will take an
object-oriented approach since that is what programmers in
those languages are most familiar with. LLRP messages are
encoded and decoded from binary form to object trees in memory.

As Perl culture is different, this approach to LLRP is
radically different: the goal is to present a minimal API
which permits as natural a method as possible for working
with LLRP messages.  There are no 100's of autogenerated
classes or a class inheritance hierarchy here: just one main
packages to interface to, RFID::LLRP::Link. you will generally
only need to work with these four functions from RFID::LLRP::Link:

    reader_connect()
    reader_disconnect()
    transact()
    monitor()

Lower-level operations are also exposed, like encode_message()
and decode_message().

The way Perl LLRP-XML accomplishes this is by leveraging
XML-DOM and XPath. LLRP 'specs' are quite naturally treated
as documents due to their nested structure. Once the idea of
mapping to XML as an intermediate form was hit upon, and a
W3C XML Schema representing the "abstract" LLRP protocol created,
several things fell out naturally:

a) Using W3C XML Schema aware editors, the text editor helps
   you interactively build LLRP messages. This way you get a
   CASE tool for building LLRP messages

b) With a textual format for LLRP messages it becomes a
   lingua franca for discussing LLRP issues concretely: just
   paste the XML dumped via Trace mode into an email.

c) XML representations of useful messages can be committed to
   source control or stored on a server for reuse or
   archival purposes.

d) Judicious use of a text template engine can really
   supercharge reuse.

e) Program code becomes completely transparent. There is very
   little noise code. With Perl you can embed the XML documents
   directly in your source if you wish.  I tend to do this while
   using the text folding feature of Vim to hide or reveal it at
   will.


XPath is the final piece that makes Perl LLRP-XML work.
By applying simple XPath queries to decoded response
messages you can zero in on just the data you need.
There is rarely a reason to manually walk the XML-DOM tree.
Just do an XPath query.

John R. Hogerhuis
jhoger@pobox.com



=================
= List of Files =
=================

./INSTALL.TXT
------------

Installation instructions. Start here especially if you
are using Windows and are having trouble getting Gnome
LibXML installed.


nb: the RFID/LLRP is structured this way in anticipation
of packaging these modules for CPAN.

./RFID/LLRP/Builder.pm
----------------------

This module is used for encoding and decoding LLRP
Binary Packets to and from LLRP XML.


./RFID/LLRP/Link.pm
-------------------

This module is used for establishing an LLRP connection
and message-by-message communication with any reader
that implements the LLRP protocol. 


./Examples/inventory_example.pl
----------------

Simple LLRP demo; performs an inventory operation. If
this working, you are setup and ready to use LLRP-XML/Perl
for your own development.


./Examples/simple_encode_decode.pl
----------------

Simple LLRP demo; decodes and dumps an example LLRP message.
Uses the RFID::LLRP::Builder routines encode_message()
and decode_message() .


./RFID/LLRP/Schema.pm
---------------------

This module models the LLRP binary schema You probably
DO NOT care about this file unless you are maintaining
Builder.pm or writing a code generator.


./gen_pod.pl
---------------------

Regenerates the POD documentation as html

./Documentation/Builder.html
./Documentation/Schema.html
./Documentation/Link.html
./Documentation/Helper.html
-----------------------------

POD documentation regarding the Perl LLRP-XML packages


./README.TXT
------------

This file



