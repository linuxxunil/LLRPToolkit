
/*
 * Generated file - DO NOT EDIT
 *
 * This is the header file for the LLRP Tool Kit (LTK)
 * C++ (aka cpp) implementation. It is generated into a .inc file
 * that is included by a platform specific .cpp source file.
 * That .cpp file takes care of prerequisites needed by this file.
 */



/*
 * Vendor descriptors
 */

  
const CVendorDescriptor
g_vdescLLRPOrg =
{
  "llrpOrg",	// m_pName
  29840,	// m_VendorID
};


/*
 * Namespace descriptors
 */

  
const CNamespaceDescriptor
g_nsdescllrpOrg =
{
  "llrpOrg",	// m_pPrefix
  "http://www.llrp.org/ltk/schema/extension/Sample/xml/1.0/",	// m_pURI
  "http://www.llrp.org/ltk/schema/extension/Sample/xml/1.0/llrpOrgExample.xsd",	// m_pSchemaLocation
};


/*
 * Enumeration string tables
 */

  
const SEnumTableEntry
g_estLlrpOrgEnumeration1[] =
{
  
    {
        "v1",
        LlrpOrgEnumeration1_v1,
    },
    {
        "v2",
        LlrpOrgEnumeration1_v2,
    },
    {
        "v3",
        LlrpOrgEnumeration1_v3,
    },
    {
        "v4",
        LlrpOrgEnumeration1_v4,
    },
    {
        "v5",
        LlrpOrgEnumeration1_v5,
    },
    {
        "v6",
        LlrpOrgEnumeration1_v6,
    },
    { 0, 0 }
};




/*
*****************************************************************
**
** Custom message LLRPORG_VENDOR_MESSAGE_1
**
*****************************************************************
*/
  

const CTypeDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_typeDescriptor =
{
    TRUE,		// m_bIsMessage
    "LLRPORG_VENDOR_MESSAGE_1",	// m_pName
    &g_vdescLLRPOrg,	// m_pVendorDescriptor
    &g_nsdescllrpOrg,	// m_pNamespaceDescriptor
    100,	// m_TypeNum
    NULL,    // m_pResponseType

    s_apFieldDescriptorTable,   // m_ppFieldDescriptorTable
    s_construct,                // m_pfConstruct
    s_decodeFields,             // m_pfDecodeFields
};



const CFieldDescriptor * const
CLLRPORG_VENDOR_MESSAGE_1::s_apFieldDescriptorTable[] =
{
  
    &s_fdtest_field1_u1,
    &s_fdtest_field2_u2,
    &s_fdtest_field3_u1v,
    &s_fdtest_field4_u8,
    &s_fdtest_field5_s8,
    &s_fdtest_field6_u8v,
    &s_fdtest_field7_s8v,
    &s_fdtest_field8_utf8v,
    &s_fdtest_field9_u16,
    &s_fdtest_field10_u16v,
    &s_fdtest_field11_s16,
    &s_fdtest_field12_s16v,
    &s_fdtest_field13_u32,
    &s_fdtest_field14_u32v,
    &s_fdtest_field15_s32,
    &s_fdtest_field16_s32v,
    &s_fdtest_field17_u64,
    &s_fdtest_field18_u64v,
    &s_fdtest_field19_s64,
    &s_fdtest_field20_s64v,
    &s_fdtest_field21_u96,
    &s_fdtest_field22_bte,
    NULL
};



const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field1_u1 =
{
    CFieldDescriptor::FT_U1,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field1_u1",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field2_u2 =
{
    CFieldDescriptor::FT_U2,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field2_u2",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field3_u1v =
{
    CFieldDescriptor::FT_U1V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field3_u1v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field4_u8 =
{
    CFieldDescriptor::FT_U8,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field4_u8",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field5_s8 =
{
    CFieldDescriptor::FT_S8,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field5_s8",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field6_u8v =
{
    CFieldDescriptor::FT_U8V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field6_u8v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field7_s8v =
{
    CFieldDescriptor::FT_S8V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field7_s8v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field8_utf8v =
{
    CFieldDescriptor::FT_UTF8V,	// m_eFieldType
    CFieldDescriptor::FMT_UTF8,	// m_eFieldFormat
    "test_field8_utf8v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field9_u16 =
{
    CFieldDescriptor::FT_U16,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field9_u16",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field10_u16v =
{
    CFieldDescriptor::FT_U16V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field10_u16v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field11_s16 =
{
    CFieldDescriptor::FT_S16,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field11_s16",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field12_s16v =
{
    CFieldDescriptor::FT_S16V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field12_s16v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field13_u32 =
{
    CFieldDescriptor::FT_E32,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field13_u32",	// m_pName
    g_estLlrpOrgEnumeration1	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field14_u32v =
{
    CFieldDescriptor::FT_U32V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field14_u32v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field15_s32 =
{
    CFieldDescriptor::FT_S32,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field15_s32",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field16_s32v =
{
    CFieldDescriptor::FT_S32V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field16_s32v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field17_u64 =
{
    CFieldDescriptor::FT_U64,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field17_u64",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field18_u64v =
{
    CFieldDescriptor::FT_U64V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field18_u64v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field19_s64 =
{
    CFieldDescriptor::FT_S64,	// m_eFieldType
    CFieldDescriptor::FMT_DEC,	// m_eFieldFormat
    "test_field19_s64",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field20_s64v =
{
    CFieldDescriptor::FT_S64V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field20_s64v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field21_u96 =
{
    CFieldDescriptor::FT_U96,	// m_eFieldType
    CFieldDescriptor::FMT_HEX,	// m_eFieldFormat
    "test_field21_u96",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLLRPORG_VENDOR_MESSAGE_1::s_fdtest_field22_bte =
{
    CFieldDescriptor::FT_BYTESTOEND,	// m_eFieldType
    CFieldDescriptor::FMT_HEX,	// m_eFieldFormat
    "test_field22_bte",	// m_pName
    NULL	// m_pEnumTable
};
CLLRPORG_VENDOR_MESSAGE_1::CLLRPORG_VENDOR_MESSAGE_1 (void)
{
    m_pType = &s_typeDescriptor;
  
    m_test_field1_u1 = 0;
    m_test_field2_u2 = 0;
    m_test_field4_u8 = 0;
    m_test_field5_s8 = 0;
    m_test_field9_u16 = 0;
    m_test_field11_s16 = 0;
    m_etest_field13_u32 = (ELlrpOrgEnumeration1) 0;
    m_test_field15_s32 = 0;
    m_test_field17_u64 = 0;
    m_test_field19_s64 = 0;
}

CLLRPORG_VENDOR_MESSAGE_1::~CLLRPORG_VENDOR_MESSAGE_1 (void)
{
}


CElement *
CLLRPORG_VENDOR_MESSAGE_1::s_construct (void)
{
    return (CElement *) new CLLRPORG_VENDOR_MESSAGE_1();
}


void
CLLRPORG_VENDOR_MESSAGE_1::s_decodeFields (
  CDecoderStream *              pDecoderStream,
  CElement *                    pTargetElement)
{
    CLLRPORG_VENDOR_MESSAGE_1 * pTarget = (CLLRPORG_VENDOR_MESSAGE_1 *) pTargetElement;

  
    if(NULL != pTarget)
    {
        pTarget->m_test_field1_u1 = pDecoderStream->get_u1(&s_fdtest_field1_u1);
    }
    else
    {
        pDecoderStream->get_u1(&s_fdtest_field1_u1);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field2_u2 = pDecoderStream->get_u2(&s_fdtest_field2_u2);
    }
    else
    {
        pDecoderStream->get_u2(&s_fdtest_field2_u2);
    }
    
    pDecoderStream->get_reserved(5);

    if(NULL != pTarget)
    {
        pTarget->m_test_field3_u1v = pDecoderStream->get_u1v(&s_fdtest_field3_u1v);
    }
    else
    {
        pDecoderStream->get_u1v(&s_fdtest_field3_u1v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field4_u8 = pDecoderStream->get_u8(&s_fdtest_field4_u8);
    }
    else
    {
        pDecoderStream->get_u8(&s_fdtest_field4_u8);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field5_s8 = pDecoderStream->get_s8(&s_fdtest_field5_s8);
    }
    else
    {
        pDecoderStream->get_s8(&s_fdtest_field5_s8);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field6_u8v = pDecoderStream->get_u8v(&s_fdtest_field6_u8v);
    }
    else
    {
        pDecoderStream->get_u8v(&s_fdtest_field6_u8v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field7_s8v = pDecoderStream->get_s8v(&s_fdtest_field7_s8v);
    }
    else
    {
        pDecoderStream->get_s8v(&s_fdtest_field7_s8v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field8_utf8v = pDecoderStream->get_utf8v(&s_fdtest_field8_utf8v);
    }
    else
    {
        pDecoderStream->get_utf8v(&s_fdtest_field8_utf8v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field9_u16 = pDecoderStream->get_u16(&s_fdtest_field9_u16);
    }
    else
    {
        pDecoderStream->get_u16(&s_fdtest_field9_u16);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field10_u16v = pDecoderStream->get_u16v(&s_fdtest_field10_u16v);
    }
    else
    {
        pDecoderStream->get_u16v(&s_fdtest_field10_u16v);
    }
    
    pDecoderStream->get_reserved(1);

    pDecoderStream->get_reserved(31);

    if(NULL != pTarget)
    {
        pTarget->m_test_field11_s16 = pDecoderStream->get_s16(&s_fdtest_field11_s16);
    }
    else
    {
        pDecoderStream->get_s16(&s_fdtest_field11_s16);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field12_s16v = pDecoderStream->get_s16v(&s_fdtest_field12_s16v);
    }
    else
    {
        pDecoderStream->get_s16v(&s_fdtest_field12_s16v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_etest_field13_u32 = (ELlrpOrgEnumeration1) pDecoderStream->get_e32(&s_fdtest_field13_u32);
    }
    else
    {
        pDecoderStream->get_e32(&s_fdtest_field13_u32);
    }

    if(NULL != pTarget)
    {
        pTarget->m_test_field14_u32v = pDecoderStream->get_u32v(&s_fdtest_field14_u32v);
    }
    else
    {
        pDecoderStream->get_u32v(&s_fdtest_field14_u32v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field15_s32 = pDecoderStream->get_s32(&s_fdtest_field15_s32);
    }
    else
    {
        pDecoderStream->get_s32(&s_fdtest_field15_s32);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field16_s32v = pDecoderStream->get_s32v(&s_fdtest_field16_s32v);
    }
    else
    {
        pDecoderStream->get_s32v(&s_fdtest_field16_s32v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field17_u64 = pDecoderStream->get_u64(&s_fdtest_field17_u64);
    }
    else
    {
        pDecoderStream->get_u64(&s_fdtest_field17_u64);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field18_u64v = pDecoderStream->get_u64v(&s_fdtest_field18_u64v);
    }
    else
    {
        pDecoderStream->get_u64v(&s_fdtest_field18_u64v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field19_s64 = pDecoderStream->get_s64(&s_fdtest_field19_s64);
    }
    else
    {
        pDecoderStream->get_s64(&s_fdtest_field19_s64);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field20_s64v = pDecoderStream->get_s64v(&s_fdtest_field20_s64v);
    }
    else
    {
        pDecoderStream->get_s64v(&s_fdtest_field20_s64v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field21_u96 = pDecoderStream->get_u96(&s_fdtest_field21_u96);
    }
    else
    {
        pDecoderStream->get_u96(&s_fdtest_field21_u96);
    }
    
    pDecoderStream->get_reserved(15);

    pDecoderStream->get_reserved(17);

    if(NULL != pTarget)
    {
        pTarget->m_test_field22_bte = pDecoderStream->get_bytesToEnd(&s_fdtest_field22_bte);
    }
    else
    {
        pDecoderStream->get_bytesToEnd(&s_fdtest_field22_bte);
    }
    
}


void
CLLRPORG_VENDOR_MESSAGE_1::decodeFields (
  CDecoderStream *              pDecoderStream)
{
    s_decodeFields(pDecoderStream, (CElement *)this);
}


void
CLLRPORG_VENDOR_MESSAGE_1::assimilateSubParameters (
  CErrorDetails *               pError)
{
    tListOfParameters::iterator Cur = m_listAllSubParameters.begin();
    tListOfParameters::iterator End = m_listAllSubParameters.end();
    const CTypeDescriptor *     pType;

  

    if(Cur != End)
    {
        pError->unexpectedParameter(*Cur);
    }

    return;

  missing:
    pError->missingParameter(pType);
}


void
CLLRPORG_VENDOR_MESSAGE_1::encode (
  CEncoderStream *              pEncoderStream) const
{
    const CTypeDescriptor *     pType;

  
    pEncoderStream->put_u1(m_test_field1_u1, &s_fdtest_field1_u1);

    pEncoderStream->put_u2(m_test_field2_u2, &s_fdtest_field2_u2);

    pEncoderStream->put_reserved(5);

    pEncoderStream->put_u1v(m_test_field3_u1v, &s_fdtest_field3_u1v);

    pEncoderStream->put_u8(m_test_field4_u8, &s_fdtest_field4_u8);

    pEncoderStream->put_s8(m_test_field5_s8, &s_fdtest_field5_s8);

    pEncoderStream->put_u8v(m_test_field6_u8v, &s_fdtest_field6_u8v);

    pEncoderStream->put_s8v(m_test_field7_s8v, &s_fdtest_field7_s8v);

    pEncoderStream->put_utf8v(m_test_field8_utf8v, &s_fdtest_field8_utf8v);

    pEncoderStream->put_u16(m_test_field9_u16, &s_fdtest_field9_u16);

    pEncoderStream->put_u16v(m_test_field10_u16v, &s_fdtest_field10_u16v);

    pEncoderStream->put_reserved(1);

    pEncoderStream->put_reserved(31);

    pEncoderStream->put_s16(m_test_field11_s16, &s_fdtest_field11_s16);

    pEncoderStream->put_s16v(m_test_field12_s16v, &s_fdtest_field12_s16v);

    pEncoderStream->put_e32((int)m_etest_field13_u32, &s_fdtest_field13_u32);

    pEncoderStream->put_u32v(m_test_field14_u32v, &s_fdtest_field14_u32v);

    pEncoderStream->put_s32(m_test_field15_s32, &s_fdtest_field15_s32);

    pEncoderStream->put_s32v(m_test_field16_s32v, &s_fdtest_field16_s32v);

    pEncoderStream->put_u64(m_test_field17_u64, &s_fdtest_field17_u64);

    pEncoderStream->put_u64v(m_test_field18_u64v, &s_fdtest_field18_u64v);

    pEncoderStream->put_s64(m_test_field19_s64, &s_fdtest_field19_s64);

    pEncoderStream->put_s64v(m_test_field20_s64v, &s_fdtest_field20_s64v);

    pEncoderStream->put_u96(m_test_field21_u96, &s_fdtest_field21_u96);

    pEncoderStream->put_reserved(15);

    pEncoderStream->put_reserved(17);

    pEncoderStream->put_bytesToEnd(m_test_field22_bte, &s_fdtest_field22_bte);

}




/*
*****************************************************************
**
** Custom message LLRPORG_VENDOR_MESSAGE_2
**
*****************************************************************
*/
  

const CTypeDescriptor
CLLRPORG_VENDOR_MESSAGE_2::s_typeDescriptor =
{
    TRUE,		// m_bIsMessage
    "LLRPORG_VENDOR_MESSAGE_2",	// m_pName
    &g_vdescLLRPOrg,	// m_pVendorDescriptor
    &g_nsdescllrpOrg,	// m_pNamespaceDescriptor
    254,	// m_TypeNum
    NULL,    // m_pResponseType

    s_apFieldDescriptorTable,   // m_ppFieldDescriptorTable
    s_construct,                // m_pfConstruct
    s_decodeFields,             // m_pfDecodeFields
};



const CFieldDescriptor * const
CLLRPORG_VENDOR_MESSAGE_2::s_apFieldDescriptorTable[] =
{
  
    NULL
};

CLLRPORG_VENDOR_MESSAGE_2::CLLRPORG_VENDOR_MESSAGE_2 (void)
{
    m_pType = &s_typeDescriptor;
  
    m_pLlrpOrgCustomParameter1 = NULL;
    m_pLLRPStatus = NULL;
}

CLLRPORG_VENDOR_MESSAGE_2::~CLLRPORG_VENDOR_MESSAGE_2 (void)
{
}


CElement *
CLLRPORG_VENDOR_MESSAGE_2::s_construct (void)
{
    return (CElement *) new CLLRPORG_VENDOR_MESSAGE_2();
}


void
CLLRPORG_VENDOR_MESSAGE_2::s_decodeFields (
  CDecoderStream *              pDecoderStream,
  CElement *                    pTargetElement)
{
    CLLRPORG_VENDOR_MESSAGE_2 * pTarget = (CLLRPORG_VENDOR_MESSAGE_2 *) pTargetElement;

  
}


void
CLLRPORG_VENDOR_MESSAGE_2::decodeFields (
  CDecoderStream *              pDecoderStream)
{
    s_decodeFields(pDecoderStream, (CElement *)this);
}


void
CLLRPORG_VENDOR_MESSAGE_2::assimilateSubParameters (
  CErrorDetails *               pError)
{
    tListOfParameters::iterator Cur = m_listAllSubParameters.begin();
    tListOfParameters::iterator End = m_listAllSubParameters.end();
    const CTypeDescriptor *     pType;

  

    // 0-1 of LlrpOrgCustomParameter1
    pType = &CLlrpOrgCustomParameter1::s_typeDescriptor;
  
    if(Cur != End && (*Cur)->m_pType == pType)
    {
        m_pLlrpOrgCustomParameter1 = (CLlrpOrgCustomParameter1 *)*Cur++;
    }
    

    // 1 of LLRPStatus
    pType = &CLLRPStatus::s_typeDescriptor;
  
    if(Cur == End || (*Cur)->m_pType != pType)
    {
        goto missing;
    }
    m_pLLRPStatus = (CLLRPStatus *)*Cur++;
    

    // 0-N of AntennaConfiguration
    pType = &CAntennaConfiguration::s_typeDescriptor;
  
    while(Cur != End && (*Cur)->m_pType == pType)
    {
        m_listAntennaConfiguration.push_back((CAntennaConfiguration *)*Cur);
        Cur++;
    }
    

    if(Cur != End)
    {
        pError->unexpectedParameter(*Cur);
    }

    return;

  missing:
    pError->missingParameter(pType);
}


EResultCode
CLLRPORG_VENDOR_MESSAGE_2::setLlrpOrgCustomParameter1 (
  CLlrpOrgCustomParameter1 *     pValue)
{
    removeSubParameterFromAllList(m_pLlrpOrgCustomParameter1);
    delete m_pLlrpOrgCustomParameter1;
    m_pLlrpOrgCustomParameter1 = pValue;
    addSubParameterToAllList(pValue);
    return RC_OK;
}

EResultCode
CLLRPORG_VENDOR_MESSAGE_2::setLLRPStatus (
  CLLRPStatus *     pValue)
{
    removeSubParameterFromAllList(m_pLLRPStatus);
    delete m_pLLRPStatus;
    m_pLLRPStatus = pValue;
    addSubParameterToAllList(pValue);
    return RC_OK;
}

EResultCode
CLLRPORG_VENDOR_MESSAGE_2::addAntennaConfiguration (
  CAntennaConfiguration *     pValue)
{
    m_listAntennaConfiguration.push_back(pValue);
    addSubParameterToAllList(pValue);
    return RC_OK;
}

void
CLLRPORG_VENDOR_MESSAGE_2::encode (
  CEncoderStream *              pEncoderStream) const
{
    const CTypeDescriptor *     pType;

  
    pType = &CLlrpOrgCustomParameter1::s_typeDescriptor;
      
    pEncoderStream->putOptionalSubParameter(m_pLlrpOrgCustomParameter1, pType);
      
    pType = &CLLRPStatus::s_typeDescriptor;
      
    pEncoderStream->putRequiredSubParameter(m_pLLRPStatus, pType);
      
    pType = &CAntennaConfiguration::s_typeDescriptor;
      
    pEncoderStream->putOptionalSubParameterList((tListOfParameters *) &m_listAntennaConfiguration, pType);
      
}




/*
*****************************************************************
**
** Custom message LLRPORG_VENDOR_MESSAGE_3
**
*****************************************************************
*/
  

const CTypeDescriptor
CLLRPORG_VENDOR_MESSAGE_3::s_typeDescriptor =
{
    TRUE,		// m_bIsMessage
    "LLRPORG_VENDOR_MESSAGE_3",	// m_pName
    &g_vdescLLRPOrg,	// m_pVendorDescriptor
    &g_nsdescllrpOrg,	// m_pNamespaceDescriptor
    253,	// m_TypeNum
    NULL,    // m_pResponseType

    s_apFieldDescriptorTable,   // m_ppFieldDescriptorTable
    s_construct,                // m_pfConstruct
    s_decodeFields,             // m_pfDecodeFields
};



const CFieldDescriptor * const
CLLRPORG_VENDOR_MESSAGE_3::s_apFieldDescriptorTable[] =
{
  
    NULL
};

CLLRPORG_VENDOR_MESSAGE_3::CLLRPORG_VENDOR_MESSAGE_3 (void)
{
    m_pType = &s_typeDescriptor;
  
}

CLLRPORG_VENDOR_MESSAGE_3::~CLLRPORG_VENDOR_MESSAGE_3 (void)
{
}


CElement *
CLLRPORG_VENDOR_MESSAGE_3::s_construct (void)
{
    return (CElement *) new CLLRPORG_VENDOR_MESSAGE_3();
}


void
CLLRPORG_VENDOR_MESSAGE_3::s_decodeFields (
  CDecoderStream *              pDecoderStream,
  CElement *                    pTargetElement)
{
    CLLRPORG_VENDOR_MESSAGE_3 * pTarget = (CLLRPORG_VENDOR_MESSAGE_3 *) pTargetElement;

  
}


void
CLLRPORG_VENDOR_MESSAGE_3::decodeFields (
  CDecoderStream *              pDecoderStream)
{
    s_decodeFields(pDecoderStream, (CElement *)this);
}


void
CLLRPORG_VENDOR_MESSAGE_3::assimilateSubParameters (
  CErrorDetails *               pError)
{
    tListOfParameters::iterator Cur = m_listAllSubParameters.begin();
    tListOfParameters::iterator End = m_listAllSubParameters.end();
    const CTypeDescriptor *     pType;

  

    // 1-N of choice LlrpOrgCustomChoice1
    pType = NULL;
  
    if(Cur == End || !CLlrpOrgCustomChoice1::isMember(*Cur))
    {
        goto missing;
    }
    while(Cur != End && CLlrpOrgCustomChoice1::isMember(*Cur))
    {
        m_listLlrpOrgCustomChoice1.push_back(*Cur);
        Cur++;
    }
    

    if(Cur != End)
    {
        pError->unexpectedParameter(*Cur);
    }

    return;

  missing:
    pError->missingParameter(pType);
}


EResultCode
CLLRPORG_VENDOR_MESSAGE_3::addLlrpOrgCustomChoice1 (
  CParameter *                  pValue)
{
    if(!CLlrpOrgCustomChoice1::isMember(pValue))
    {
        return RC_InvalidChoiceMember;
    }

    m_listLlrpOrgCustomChoice1.push_back(pValue);
    addSubParameterToAllList(pValue);
    return RC_OK;
}

void
CLLRPORG_VENDOR_MESSAGE_3::encode (
  CEncoderStream *              pEncoderStream) const
{
    const CTypeDescriptor *     pType;

  
    pType = NULL;
      
    pEncoderStream->putRequiredSubParameterList((tListOfParameters *) &m_listLlrpOrgCustomChoice1, pType);
      
}




/*
*****************************************************************
**
** Custom message LLRPORG_VENDOR_MESSAGE_4
**
*****************************************************************
*/
  

const CTypeDescriptor
CLLRPORG_VENDOR_MESSAGE_4::s_typeDescriptor =
{
    TRUE,		// m_bIsMessage
    "LLRPORG_VENDOR_MESSAGE_4",	// m_pName
    &g_vdescLLRPOrg,	// m_pVendorDescriptor
    &g_nsdescllrpOrg,	// m_pNamespaceDescriptor
    252,	// m_TypeNum
    NULL,    // m_pResponseType

    s_apFieldDescriptorTable,   // m_ppFieldDescriptorTable
    s_construct,                // m_pfConstruct
    s_decodeFields,             // m_pfDecodeFields
};



const CFieldDescriptor * const
CLLRPORG_VENDOR_MESSAGE_4::s_apFieldDescriptorTable[] =
{
  
    NULL
};

CLLRPORG_VENDOR_MESSAGE_4::CLLRPORG_VENDOR_MESSAGE_4 (void)
{
    m_pType = &s_typeDescriptor;
  
    m_pLlrpOrgCustomParameter1 = NULL;
    m_pLLRPStatus = NULL;
}

CLLRPORG_VENDOR_MESSAGE_4::~CLLRPORG_VENDOR_MESSAGE_4 (void)
{
}


CElement *
CLLRPORG_VENDOR_MESSAGE_4::s_construct (void)
{
    return (CElement *) new CLLRPORG_VENDOR_MESSAGE_4();
}


void
CLLRPORG_VENDOR_MESSAGE_4::s_decodeFields (
  CDecoderStream *              pDecoderStream,
  CElement *                    pTargetElement)
{
    CLLRPORG_VENDOR_MESSAGE_4 * pTarget = (CLLRPORG_VENDOR_MESSAGE_4 *) pTargetElement;

  
}


void
CLLRPORG_VENDOR_MESSAGE_4::decodeFields (
  CDecoderStream *              pDecoderStream)
{
    s_decodeFields(pDecoderStream, (CElement *)this);
}


void
CLLRPORG_VENDOR_MESSAGE_4::assimilateSubParameters (
  CErrorDetails *               pError)
{
    tListOfParameters::iterator Cur = m_listAllSubParameters.begin();
    tListOfParameters::iterator End = m_listAllSubParameters.end();
    const CTypeDescriptor *     pType;

  

    // 0-1 of LlrpOrgCustomParameter1
    pType = &CLlrpOrgCustomParameter1::s_typeDescriptor;
  
    if(Cur != End && (*Cur)->m_pType == pType)
    {
        m_pLlrpOrgCustomParameter1 = (CLlrpOrgCustomParameter1 *)*Cur++;
    }
    

    // 1 of LLRPStatus
    pType = &CLLRPStatus::s_typeDescriptor;
  
    if(Cur == End || (*Cur)->m_pType != pType)
    {
        goto missing;
    }
    m_pLLRPStatus = (CLLRPStatus *)*Cur++;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(Cur != End && (*Cur)->isAllowedExtension(&s_typeDescriptor))
    {
        m_listCustom.push_back(*Cur);
        Cur++;
    }
    

    if(Cur != End)
    {
        pError->unexpectedParameter(*Cur);
    }

    return;

  missing:
    pError->missingParameter(pType);
}


EResultCode
CLLRPORG_VENDOR_MESSAGE_4::setLlrpOrgCustomParameter1 (
  CLlrpOrgCustomParameter1 *     pValue)
{
    removeSubParameterFromAllList(m_pLlrpOrgCustomParameter1);
    delete m_pLlrpOrgCustomParameter1;
    m_pLlrpOrgCustomParameter1 = pValue;
    addSubParameterToAllList(pValue);
    return RC_OK;
}

EResultCode
CLLRPORG_VENDOR_MESSAGE_4::setLLRPStatus (
  CLLRPStatus *     pValue)
{
    removeSubParameterFromAllList(m_pLLRPStatus);
    delete m_pLLRPStatus;
    m_pLLRPStatus = pValue;
    addSubParameterToAllList(pValue);
    return RC_OK;
}

EResultCode
CLLRPORG_VENDOR_MESSAGE_4::addCustom (
  CParameter *                  pValue)
{
    if(!pValue->isAllowedIn(&s_typeDescriptor))
    {
        return RC_NotAllowedAtExtensionPoint;
    }

    m_listCustom.push_back(pValue);
    addSubParameterToAllList(pValue);
    return RC_OK;
}

void
CLLRPORG_VENDOR_MESSAGE_4::encode (
  CEncoderStream *              pEncoderStream) const
{
    const CTypeDescriptor *     pType;

  
    pType = &CLlrpOrgCustomParameter1::s_typeDescriptor;
      
    pEncoderStream->putOptionalSubParameter(m_pLlrpOrgCustomParameter1, pType);
      
    pType = &CLLRPStatus::s_typeDescriptor;
      
    pEncoderStream->putRequiredSubParameter(m_pLLRPStatus, pType);
      
    pType = &CCustom::s_typeDescriptor;
      
    pEncoderStream->putOptionalSubParameterList((tListOfParameters *) &m_listCustom, pType);
      
}




/*
*****************************************************************
**
** Custom parameter LlrpOrgCustomParameter1
**
*****************************************************************
*/
  

const CTypeDescriptor
CLlrpOrgCustomParameter1::s_typeDescriptor =
{
    FALSE,		// m_bIsMessage
    "LlrpOrgCustomParameter1",	// m_pName
    &g_vdescLLRPOrg,	// m_pVendorDescriptor
    &g_nsdescllrpOrg,	// m_pNamespaceDescriptor
    2147483647,	// m_TypeNum
    NULL,    // m_pResponseType

    s_apFieldDescriptorTable,   // m_ppFieldDescriptorTable
    s_construct,                // m_pfConstruct
    s_decodeFields,             // m_pfDecodeFields
};



const CFieldDescriptor * const
CLlrpOrgCustomParameter1::s_apFieldDescriptorTable[] =
{
  
    &s_fdtest_field1_u1,
    &s_fdtest_field2_u2,
    &s_fdtest_field3_u1v,
    &s_fdtest_field4_u8,
    &s_fdtest_field5_s8,
    &s_fdtest_field6_u8v,
    &s_fdtest_field7_s8v,
    &s_fdtest_field8_utf8v,
    &s_fdtest_field9_u16,
    &s_fdtest_field10_u16v,
    &s_fdtest_field11_s16,
    &s_fdtest_field12_s16v,
    &s_fdtest_field13_u32,
    &s_fdtest_field14_u32v,
    &s_fdtest_field15_s32,
    &s_fdtest_field16_s32v,
    &s_fdtest_field17_u64,
    &s_fdtest_field18_u64v,
    &s_fdtest_field19_s64,
    &s_fdtest_field20_s64v,
    &s_fdtest_field21_u96,
    &s_fdtest_field22_bte,
    NULL
};



const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field1_u1 =
{
    CFieldDescriptor::FT_U1,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field1_u1",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field2_u2 =
{
    CFieldDescriptor::FT_U2,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field2_u2",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field3_u1v =
{
    CFieldDescriptor::FT_U1V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field3_u1v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field4_u8 =
{
    CFieldDescriptor::FT_U8,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field4_u8",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field5_s8 =
{
    CFieldDescriptor::FT_S8,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field5_s8",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field6_u8v =
{
    CFieldDescriptor::FT_U8V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field6_u8v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field7_s8v =
{
    CFieldDescriptor::FT_S8V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field7_s8v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field8_utf8v =
{
    CFieldDescriptor::FT_UTF8V,	// m_eFieldType
    CFieldDescriptor::FMT_UTF8,	// m_eFieldFormat
    "test_field8_utf8v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field9_u16 =
{
    CFieldDescriptor::FT_U16,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field9_u16",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field10_u16v =
{
    CFieldDescriptor::FT_U16V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field10_u16v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field11_s16 =
{
    CFieldDescriptor::FT_S16,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field11_s16",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field12_s16v =
{
    CFieldDescriptor::FT_S16V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field12_s16v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field13_u32 =
{
    CFieldDescriptor::FT_E32,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field13_u32",	// m_pName
    g_estLlrpOrgEnumeration1	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field14_u32v =
{
    CFieldDescriptor::FT_U32V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field14_u32v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field15_s32 =
{
    CFieldDescriptor::FT_S32,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field15_s32",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field16_s32v =
{
    CFieldDescriptor::FT_S32V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field16_s32v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field17_u64 =
{
    CFieldDescriptor::FT_U64,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field17_u64",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field18_u64v =
{
    CFieldDescriptor::FT_U64V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field18_u64v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field19_s64 =
{
    CFieldDescriptor::FT_S64,	// m_eFieldType
    CFieldDescriptor::FMT_DEC,	// m_eFieldFormat
    "test_field19_s64",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field20_s64v =
{
    CFieldDescriptor::FT_S64V,	// m_eFieldType
    CFieldDescriptor::FMT_NORMAL,	// m_eFieldFormat
    "test_field20_s64v",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field21_u96 =
{
    CFieldDescriptor::FT_U96,	// m_eFieldType
    CFieldDescriptor::FMT_HEX,	// m_eFieldFormat
    "test_field21_u96",	// m_pName
    NULL	// m_pEnumTable
};


const CFieldDescriptor
CLlrpOrgCustomParameter1::s_fdtest_field22_bte =
{
    CFieldDescriptor::FT_BYTESTOEND,	// m_eFieldType
    CFieldDescriptor::FMT_HEX,	// m_eFieldFormat
    "test_field22_bte",	// m_pName
    NULL	// m_pEnumTable
};
CLlrpOrgCustomParameter1::CLlrpOrgCustomParameter1 (void)
{
    m_pType = &s_typeDescriptor;
  
    m_test_field1_u1 = 0;
    m_test_field2_u2 = 0;
    m_test_field4_u8 = 0;
    m_test_field5_s8 = 0;
    m_test_field9_u16 = 0;
    m_test_field11_s16 = 0;
    m_etest_field13_u32 = (ELlrpOrgEnumeration1) 0;
    m_test_field15_s32 = 0;
    m_test_field17_u64 = 0;
    m_test_field19_s64 = 0;
}

CLlrpOrgCustomParameter1::~CLlrpOrgCustomParameter1 (void)
{
}


CElement *
CLlrpOrgCustomParameter1::s_construct (void)
{
    return (CElement *) new CLlrpOrgCustomParameter1();
}


void
CLlrpOrgCustomParameter1::s_decodeFields (
  CDecoderStream *              pDecoderStream,
  CElement *                    pTargetElement)
{
    CLlrpOrgCustomParameter1 * pTarget = (CLlrpOrgCustomParameter1 *) pTargetElement;

  
    if(NULL != pTarget)
    {
        pTarget->m_test_field1_u1 = pDecoderStream->get_u1(&s_fdtest_field1_u1);
    }
    else
    {
        pDecoderStream->get_u1(&s_fdtest_field1_u1);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field2_u2 = pDecoderStream->get_u2(&s_fdtest_field2_u2);
    }
    else
    {
        pDecoderStream->get_u2(&s_fdtest_field2_u2);
    }
    
    pDecoderStream->get_reserved(5);

    if(NULL != pTarget)
    {
        pTarget->m_test_field3_u1v = pDecoderStream->get_u1v(&s_fdtest_field3_u1v);
    }
    else
    {
        pDecoderStream->get_u1v(&s_fdtest_field3_u1v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field4_u8 = pDecoderStream->get_u8(&s_fdtest_field4_u8);
    }
    else
    {
        pDecoderStream->get_u8(&s_fdtest_field4_u8);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field5_s8 = pDecoderStream->get_s8(&s_fdtest_field5_s8);
    }
    else
    {
        pDecoderStream->get_s8(&s_fdtest_field5_s8);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field6_u8v = pDecoderStream->get_u8v(&s_fdtest_field6_u8v);
    }
    else
    {
        pDecoderStream->get_u8v(&s_fdtest_field6_u8v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field7_s8v = pDecoderStream->get_s8v(&s_fdtest_field7_s8v);
    }
    else
    {
        pDecoderStream->get_s8v(&s_fdtest_field7_s8v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field8_utf8v = pDecoderStream->get_utf8v(&s_fdtest_field8_utf8v);
    }
    else
    {
        pDecoderStream->get_utf8v(&s_fdtest_field8_utf8v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field9_u16 = pDecoderStream->get_u16(&s_fdtest_field9_u16);
    }
    else
    {
        pDecoderStream->get_u16(&s_fdtest_field9_u16);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field10_u16v = pDecoderStream->get_u16v(&s_fdtest_field10_u16v);
    }
    else
    {
        pDecoderStream->get_u16v(&s_fdtest_field10_u16v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field11_s16 = pDecoderStream->get_s16(&s_fdtest_field11_s16);
    }
    else
    {
        pDecoderStream->get_s16(&s_fdtest_field11_s16);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field12_s16v = pDecoderStream->get_s16v(&s_fdtest_field12_s16v);
    }
    else
    {
        pDecoderStream->get_s16v(&s_fdtest_field12_s16v);
    }
    
    pDecoderStream->get_reserved(1);

    pDecoderStream->get_reserved(31);

    if(NULL != pTarget)
    {
        pTarget->m_etest_field13_u32 = (ELlrpOrgEnumeration1) pDecoderStream->get_e32(&s_fdtest_field13_u32);
    }
    else
    {
        pDecoderStream->get_e32(&s_fdtest_field13_u32);
    }

    if(NULL != pTarget)
    {
        pTarget->m_test_field14_u32v = pDecoderStream->get_u32v(&s_fdtest_field14_u32v);
    }
    else
    {
        pDecoderStream->get_u32v(&s_fdtest_field14_u32v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field15_s32 = pDecoderStream->get_s32(&s_fdtest_field15_s32);
    }
    else
    {
        pDecoderStream->get_s32(&s_fdtest_field15_s32);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field16_s32v = pDecoderStream->get_s32v(&s_fdtest_field16_s32v);
    }
    else
    {
        pDecoderStream->get_s32v(&s_fdtest_field16_s32v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field17_u64 = pDecoderStream->get_u64(&s_fdtest_field17_u64);
    }
    else
    {
        pDecoderStream->get_u64(&s_fdtest_field17_u64);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field18_u64v = pDecoderStream->get_u64v(&s_fdtest_field18_u64v);
    }
    else
    {
        pDecoderStream->get_u64v(&s_fdtest_field18_u64v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field19_s64 = pDecoderStream->get_s64(&s_fdtest_field19_s64);
    }
    else
    {
        pDecoderStream->get_s64(&s_fdtest_field19_s64);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field20_s64v = pDecoderStream->get_s64v(&s_fdtest_field20_s64v);
    }
    else
    {
        pDecoderStream->get_s64v(&s_fdtest_field20_s64v);
    }
    
    if(NULL != pTarget)
    {
        pTarget->m_test_field21_u96 = pDecoderStream->get_u96(&s_fdtest_field21_u96);
    }
    else
    {
        pDecoderStream->get_u96(&s_fdtest_field21_u96);
    }
    
    pDecoderStream->get_reserved(15);

    pDecoderStream->get_reserved(17);

    if(NULL != pTarget)
    {
        pTarget->m_test_field22_bte = pDecoderStream->get_bytesToEnd(&s_fdtest_field22_bte);
    }
    else
    {
        pDecoderStream->get_bytesToEnd(&s_fdtest_field22_bte);
    }
    
}


void
CLlrpOrgCustomParameter1::decodeFields (
  CDecoderStream *              pDecoderStream)
{
    s_decodeFields(pDecoderStream, (CElement *)this);
}


void
CLlrpOrgCustomParameter1::assimilateSubParameters (
  CErrorDetails *               pError)
{
    tListOfParameters::iterator Cur = m_listAllSubParameters.begin();
    tListOfParameters::iterator End = m_listAllSubParameters.end();
    const CTypeDescriptor *     pType;

  

    if(Cur != End)
    {
        pError->unexpectedParameter(*Cur);
    }

    return;

  missing:
    pError->missingParameter(pType);
}


void
CLlrpOrgCustomParameter1::encode (
  CEncoderStream *              pEncoderStream) const
{
    const CTypeDescriptor *     pType;

  
    pEncoderStream->put_u1(m_test_field1_u1, &s_fdtest_field1_u1);

    pEncoderStream->put_u2(m_test_field2_u2, &s_fdtest_field2_u2);

    pEncoderStream->put_reserved(5);

    pEncoderStream->put_u1v(m_test_field3_u1v, &s_fdtest_field3_u1v);

    pEncoderStream->put_u8(m_test_field4_u8, &s_fdtest_field4_u8);

    pEncoderStream->put_s8(m_test_field5_s8, &s_fdtest_field5_s8);

    pEncoderStream->put_u8v(m_test_field6_u8v, &s_fdtest_field6_u8v);

    pEncoderStream->put_s8v(m_test_field7_s8v, &s_fdtest_field7_s8v);

    pEncoderStream->put_utf8v(m_test_field8_utf8v, &s_fdtest_field8_utf8v);

    pEncoderStream->put_u16(m_test_field9_u16, &s_fdtest_field9_u16);

    pEncoderStream->put_u16v(m_test_field10_u16v, &s_fdtest_field10_u16v);

    pEncoderStream->put_s16(m_test_field11_s16, &s_fdtest_field11_s16);

    pEncoderStream->put_s16v(m_test_field12_s16v, &s_fdtest_field12_s16v);

    pEncoderStream->put_reserved(1);

    pEncoderStream->put_reserved(31);

    pEncoderStream->put_e32((int)m_etest_field13_u32, &s_fdtest_field13_u32);

    pEncoderStream->put_u32v(m_test_field14_u32v, &s_fdtest_field14_u32v);

    pEncoderStream->put_s32(m_test_field15_s32, &s_fdtest_field15_s32);

    pEncoderStream->put_s32v(m_test_field16_s32v, &s_fdtest_field16_s32v);

    pEncoderStream->put_u64(m_test_field17_u64, &s_fdtest_field17_u64);

    pEncoderStream->put_u64v(m_test_field18_u64v, &s_fdtest_field18_u64v);

    pEncoderStream->put_s64(m_test_field19_s64, &s_fdtest_field19_s64);

    pEncoderStream->put_s64v(m_test_field20_s64v, &s_fdtest_field20_s64v);

    pEncoderStream->put_u96(m_test_field21_u96, &s_fdtest_field21_u96);

    pEncoderStream->put_reserved(15);

    pEncoderStream->put_reserved(17);

    pEncoderStream->put_bytesToEnd(m_test_field22_bte, &s_fdtest_field22_bte);

}



llrp_bool_t
CLlrpOrgCustomParameter1::isAllowedIn (
  const CTypeDescriptor *       pEnclosingElementType) const
{
  
    if(pEnclosingElementType == &CSET_READER_CONFIG::s_typeDescriptor)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &CGET_READER_CONFIG::s_typeDescriptor)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &CGET_READER_CAPABILITIES::s_typeDescriptor)
    {
        return TRUE;
    }
  
    return FALSE;
}




/*
*****************************************************************
**
** Custom parameter LlrpOrgCustomParameter2
**
*****************************************************************
*/
  

const CTypeDescriptor
CLlrpOrgCustomParameter2::s_typeDescriptor =
{
    FALSE,		// m_bIsMessage
    "LlrpOrgCustomParameter2",	// m_pName
    &g_vdescLLRPOrg,	// m_pVendorDescriptor
    &g_nsdescllrpOrg,	// m_pNamespaceDescriptor
    2147483646,	// m_TypeNum
    NULL,    // m_pResponseType

    s_apFieldDescriptorTable,   // m_ppFieldDescriptorTable
    s_construct,                // m_pfConstruct
    s_decodeFields,             // m_pfDecodeFields
};



const CFieldDescriptor * const
CLlrpOrgCustomParameter2::s_apFieldDescriptorTable[] =
{
  
    NULL
};

CLlrpOrgCustomParameter2::CLlrpOrgCustomParameter2 (void)
{
    m_pType = &s_typeDescriptor;
  
    m_pLlrpOrgCustomParameter1 = NULL;
    m_pRFTransmitter = NULL;
    m_pUTCTimestamp = NULL;
    m_pFirstSeenTimestampUptime = NULL;
}

CLlrpOrgCustomParameter2::~CLlrpOrgCustomParameter2 (void)
{
}


CElement *
CLlrpOrgCustomParameter2::s_construct (void)
{
    return (CElement *) new CLlrpOrgCustomParameter2();
}


void
CLlrpOrgCustomParameter2::s_decodeFields (
  CDecoderStream *              pDecoderStream,
  CElement *                    pTargetElement)
{
    CLlrpOrgCustomParameter2 * pTarget = (CLlrpOrgCustomParameter2 *) pTargetElement;

  
}


void
CLlrpOrgCustomParameter2::decodeFields (
  CDecoderStream *              pDecoderStream)
{
    s_decodeFields(pDecoderStream, (CElement *)this);
}


void
CLlrpOrgCustomParameter2::assimilateSubParameters (
  CErrorDetails *               pError)
{
    tListOfParameters::iterator Cur = m_listAllSubParameters.begin();
    tListOfParameters::iterator End = m_listAllSubParameters.end();
    const CTypeDescriptor *     pType;

  

    // 0-1 of LlrpOrgCustomParameter1
    pType = &CLlrpOrgCustomParameter1::s_typeDescriptor;
  
    if(Cur != End && (*Cur)->m_pType == pType)
    {
        m_pLlrpOrgCustomParameter1 = (CLlrpOrgCustomParameter1 *)*Cur++;
    }
    

    // 0-1 of RFTransmitter
    pType = &CRFTransmitter::s_typeDescriptor;
  
    if(Cur != End && (*Cur)->m_pType == pType)
    {
        m_pRFTransmitter = (CRFTransmitter *)*Cur++;
    }
    

    // 0-1 of UTCTimestamp
    pType = &CUTCTimestamp::s_typeDescriptor;
  
    if(Cur != End && (*Cur)->m_pType == pType)
    {
        m_pUTCTimestamp = (CUTCTimestamp *)*Cur++;
    }
    

    // 0-1 of FirstSeenTimestampUptime
    pType = &CFirstSeenTimestampUptime::s_typeDescriptor;
  
    if(Cur != End && (*Cur)->m_pType == pType)
    {
        m_pFirstSeenTimestampUptime = (CFirstSeenTimestampUptime *)*Cur++;
    }
    

    if(Cur != End)
    {
        pError->unexpectedParameter(*Cur);
    }

    return;

  missing:
    pError->missingParameter(pType);
}


EResultCode
CLlrpOrgCustomParameter2::setLlrpOrgCustomParameter1 (
  CLlrpOrgCustomParameter1 *     pValue)
{
    removeSubParameterFromAllList(m_pLlrpOrgCustomParameter1);
    delete m_pLlrpOrgCustomParameter1;
    m_pLlrpOrgCustomParameter1 = pValue;
    addSubParameterToAllList(pValue);
    return RC_OK;
}

EResultCode
CLlrpOrgCustomParameter2::setRFTransmitter (
  CRFTransmitter *     pValue)
{
    removeSubParameterFromAllList(m_pRFTransmitter);
    delete m_pRFTransmitter;
    m_pRFTransmitter = pValue;
    addSubParameterToAllList(pValue);
    return RC_OK;
}

EResultCode
CLlrpOrgCustomParameter2::setUTCTimestamp (
  CUTCTimestamp *     pValue)
{
    removeSubParameterFromAllList(m_pUTCTimestamp);
    delete m_pUTCTimestamp;
    m_pUTCTimestamp = pValue;
    addSubParameterToAllList(pValue);
    return RC_OK;
}

EResultCode
CLlrpOrgCustomParameter2::setFirstSeenTimestampUptime (
  CFirstSeenTimestampUptime *     pValue)
{
    removeSubParameterFromAllList(m_pFirstSeenTimestampUptime);
    delete m_pFirstSeenTimestampUptime;
    m_pFirstSeenTimestampUptime = pValue;
    addSubParameterToAllList(pValue);
    return RC_OK;
}

void
CLlrpOrgCustomParameter2::encode (
  CEncoderStream *              pEncoderStream) const
{
    const CTypeDescriptor *     pType;

  
    pType = &CLlrpOrgCustomParameter1::s_typeDescriptor;
      
    pEncoderStream->putOptionalSubParameter(m_pLlrpOrgCustomParameter1, pType);
      
    pType = &CRFTransmitter::s_typeDescriptor;
      
    pEncoderStream->putOptionalSubParameter(m_pRFTransmitter, pType);
      
    pType = &CUTCTimestamp::s_typeDescriptor;
      
    pEncoderStream->putOptionalSubParameter(m_pUTCTimestamp, pType);
      
    pType = &CFirstSeenTimestampUptime::s_typeDescriptor;
      
    pEncoderStream->putOptionalSubParameter(m_pFirstSeenTimestampUptime, pType);
      
}



llrp_bool_t
CLlrpOrgCustomParameter2::isAllowedIn (
  const CTypeDescriptor *       pEnclosingElementType) const
{
  
    if(pEnclosingElementType == &CSET_READER_CONFIG::s_typeDescriptor)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &CGET_READER_CONFIG::s_typeDescriptor)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &CGET_READER_CAPABILITIES::s_typeDescriptor)
    {
        return TRUE;
    }
  
    return FALSE;
}




/*
*****************************************************************
**
** Custom parameter LlrpOrgCustomParameter3
**
*****************************************************************
*/
  

const CTypeDescriptor
CLlrpOrgCustomParameter3::s_typeDescriptor =
{
    FALSE,		// m_bIsMessage
    "LlrpOrgCustomParameter3",	// m_pName
    &g_vdescLLRPOrg,	// m_pVendorDescriptor
    &g_nsdescllrpOrg,	// m_pNamespaceDescriptor
    2147483645,	// m_TypeNum
    NULL,    // m_pResponseType

    s_apFieldDescriptorTable,   // m_ppFieldDescriptorTable
    s_construct,                // m_pfConstruct
    s_decodeFields,             // m_pfDecodeFields
};



const CFieldDescriptor * const
CLlrpOrgCustomParameter3::s_apFieldDescriptorTable[] =
{
  
    NULL
};

CLlrpOrgCustomParameter3::CLlrpOrgCustomParameter3 (void)
{
    m_pType = &s_typeDescriptor;
  
}

CLlrpOrgCustomParameter3::~CLlrpOrgCustomParameter3 (void)
{
}


CElement *
CLlrpOrgCustomParameter3::s_construct (void)
{
    return (CElement *) new CLlrpOrgCustomParameter3();
}


void
CLlrpOrgCustomParameter3::s_decodeFields (
  CDecoderStream *              pDecoderStream,
  CElement *                    pTargetElement)
{
    CLlrpOrgCustomParameter3 * pTarget = (CLlrpOrgCustomParameter3 *) pTargetElement;

  
}


void
CLlrpOrgCustomParameter3::decodeFields (
  CDecoderStream *              pDecoderStream)
{
    s_decodeFields(pDecoderStream, (CElement *)this);
}


void
CLlrpOrgCustomParameter3::assimilateSubParameters (
  CErrorDetails *               pError)
{
    tListOfParameters::iterator Cur = m_listAllSubParameters.begin();
    tListOfParameters::iterator End = m_listAllSubParameters.end();
    const CTypeDescriptor *     pType;

  

    // 1-N of choice LlrpOrgCustomChoice1
    pType = NULL;
  
    if(Cur == End || !CLlrpOrgCustomChoice1::isMember(*Cur))
    {
        goto missing;
    }
    while(Cur != End && CLlrpOrgCustomChoice1::isMember(*Cur))
    {
        m_listLlrpOrgCustomChoice1.push_back(*Cur);
        Cur++;
    }
    

    if(Cur != End)
    {
        pError->unexpectedParameter(*Cur);
    }

    return;

  missing:
    pError->missingParameter(pType);
}


EResultCode
CLlrpOrgCustomParameter3::addLlrpOrgCustomChoice1 (
  CParameter *                  pValue)
{
    if(!CLlrpOrgCustomChoice1::isMember(pValue))
    {
        return RC_InvalidChoiceMember;
    }

    m_listLlrpOrgCustomChoice1.push_back(pValue);
    addSubParameterToAllList(pValue);
    return RC_OK;
}

void
CLlrpOrgCustomParameter3::encode (
  CEncoderStream *              pEncoderStream) const
{
    const CTypeDescriptor *     pType;

  
    pType = NULL;
      
    pEncoderStream->putRequiredSubParameterList((tListOfParameters *) &m_listLlrpOrgCustomChoice1, pType);
      
}



llrp_bool_t
CLlrpOrgCustomParameter3::isAllowedIn (
  const CTypeDescriptor *       pEnclosingElementType) const
{
  
    if(pEnclosingElementType == &CSET_READER_CONFIG::s_typeDescriptor)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &CGET_READER_CONFIG::s_typeDescriptor)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &CGET_READER_CAPABILITIES::s_typeDescriptor)
    {
        return TRUE;
    }
  
    return FALSE;
}




/*
*****************************************************************
**
** Custom parameter LlrpOrgCustomParameter4
**
*****************************************************************
*/
  

const CTypeDescriptor
CLlrpOrgCustomParameter4::s_typeDescriptor =
{
    FALSE,		// m_bIsMessage
    "LlrpOrgCustomParameter4",	// m_pName
    &g_vdescLLRPOrg,	// m_pVendorDescriptor
    &g_nsdescllrpOrg,	// m_pNamespaceDescriptor
    2147483644,	// m_TypeNum
    NULL,    // m_pResponseType

    s_apFieldDescriptorTable,   // m_ppFieldDescriptorTable
    s_construct,                // m_pfConstruct
    s_decodeFields,             // m_pfDecodeFields
};



const CFieldDescriptor * const
CLlrpOrgCustomParameter4::s_apFieldDescriptorTable[] =
{
  
    NULL
};

CLlrpOrgCustomParameter4::CLlrpOrgCustomParameter4 (void)
{
    m_pType = &s_typeDescriptor;
  
    m_pLlrpOrgCustomParameter1 = NULL;
    m_pLLRPStatus = NULL;
}

CLlrpOrgCustomParameter4::~CLlrpOrgCustomParameter4 (void)
{
}


CElement *
CLlrpOrgCustomParameter4::s_construct (void)
{
    return (CElement *) new CLlrpOrgCustomParameter4();
}


void
CLlrpOrgCustomParameter4::s_decodeFields (
  CDecoderStream *              pDecoderStream,
  CElement *                    pTargetElement)
{
    CLlrpOrgCustomParameter4 * pTarget = (CLlrpOrgCustomParameter4 *) pTargetElement;

  
}


void
CLlrpOrgCustomParameter4::decodeFields (
  CDecoderStream *              pDecoderStream)
{
    s_decodeFields(pDecoderStream, (CElement *)this);
}


void
CLlrpOrgCustomParameter4::assimilateSubParameters (
  CErrorDetails *               pError)
{
    tListOfParameters::iterator Cur = m_listAllSubParameters.begin();
    tListOfParameters::iterator End = m_listAllSubParameters.end();
    const CTypeDescriptor *     pType;

  

    // 0-1 of LlrpOrgCustomParameter1
    pType = &CLlrpOrgCustomParameter1::s_typeDescriptor;
  
    if(Cur != End && (*Cur)->m_pType == pType)
    {
        m_pLlrpOrgCustomParameter1 = (CLlrpOrgCustomParameter1 *)*Cur++;
    }
    

    // 1 of LLRPStatus
    pType = &CLLRPStatus::s_typeDescriptor;
  
    if(Cur == End || (*Cur)->m_pType != pType)
    {
        goto missing;
    }
    m_pLLRPStatus = (CLLRPStatus *)*Cur++;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(Cur != End && (*Cur)->isAllowedExtension(&s_typeDescriptor))
    {
        m_listCustom.push_back(*Cur);
        Cur++;
    }
    

    if(Cur != End)
    {
        pError->unexpectedParameter(*Cur);
    }

    return;

  missing:
    pError->missingParameter(pType);
}


EResultCode
CLlrpOrgCustomParameter4::setLlrpOrgCustomParameter1 (
  CLlrpOrgCustomParameter1 *     pValue)
{
    removeSubParameterFromAllList(m_pLlrpOrgCustomParameter1);
    delete m_pLlrpOrgCustomParameter1;
    m_pLlrpOrgCustomParameter1 = pValue;
    addSubParameterToAllList(pValue);
    return RC_OK;
}

EResultCode
CLlrpOrgCustomParameter4::setLLRPStatus (
  CLLRPStatus *     pValue)
{
    removeSubParameterFromAllList(m_pLLRPStatus);
    delete m_pLLRPStatus;
    m_pLLRPStatus = pValue;
    addSubParameterToAllList(pValue);
    return RC_OK;
}

EResultCode
CLlrpOrgCustomParameter4::addCustom (
  CParameter *                  pValue)
{
    if(!pValue->isAllowedIn(&s_typeDescriptor))
    {
        return RC_NotAllowedAtExtensionPoint;
    }

    m_listCustom.push_back(pValue);
    addSubParameterToAllList(pValue);
    return RC_OK;
}

void
CLlrpOrgCustomParameter4::encode (
  CEncoderStream *              pEncoderStream) const
{
    const CTypeDescriptor *     pType;

  
    pType = &CLlrpOrgCustomParameter1::s_typeDescriptor;
      
    pEncoderStream->putOptionalSubParameter(m_pLlrpOrgCustomParameter1, pType);
      
    pType = &CLLRPStatus::s_typeDescriptor;
      
    pEncoderStream->putRequiredSubParameter(m_pLLRPStatus, pType);
      
    pType = &CCustom::s_typeDescriptor;
      
    pEncoderStream->putOptionalSubParameterList((tListOfParameters *) &m_listCustom, pType);
      
}



llrp_bool_t
CLlrpOrgCustomParameter4::isAllowedIn (
  const CTypeDescriptor *       pEnclosingElementType) const
{
  
    if(pEnclosingElementType == &CSET_READER_CONFIG::s_typeDescriptor)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &CGET_READER_CONFIG::s_typeDescriptor)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &CGET_READER_CAPABILITIES::s_typeDescriptor)
    {
        return TRUE;
    }
  
    return FALSE;
}




/*
*****************************************************************
**
** Custom parameter LlrpOrgCustomParameter5
**
*****************************************************************
*/
  

const CTypeDescriptor
CLlrpOrgCustomParameter5::s_typeDescriptor =
{
    FALSE,		// m_bIsMessage
    "LlrpOrgCustomParameter5",	// m_pName
    &g_vdescLLRPOrg,	// m_pVendorDescriptor
    &g_nsdescllrpOrg,	// m_pNamespaceDescriptor
    2147483643,	// m_TypeNum
    NULL,    // m_pResponseType

    s_apFieldDescriptorTable,   // m_ppFieldDescriptorTable
    s_construct,                // m_pfConstruct
    s_decodeFields,             // m_pfDecodeFields
};



const CFieldDescriptor * const
CLlrpOrgCustomParameter5::s_apFieldDescriptorTable[] =
{
  
    NULL
};

CLlrpOrgCustomParameter5::CLlrpOrgCustomParameter5 (void)
{
    m_pType = &s_typeDescriptor;
  
    m_pLlrpOrgCustomParameter1 = NULL;
    m_pLLRPStatus = NULL;
}

CLlrpOrgCustomParameter5::~CLlrpOrgCustomParameter5 (void)
{
}


CElement *
CLlrpOrgCustomParameter5::s_construct (void)
{
    return (CElement *) new CLlrpOrgCustomParameter5();
}


void
CLlrpOrgCustomParameter5::s_decodeFields (
  CDecoderStream *              pDecoderStream,
  CElement *                    pTargetElement)
{
    CLlrpOrgCustomParameter5 * pTarget = (CLlrpOrgCustomParameter5 *) pTargetElement;

  
}


void
CLlrpOrgCustomParameter5::decodeFields (
  CDecoderStream *              pDecoderStream)
{
    s_decodeFields(pDecoderStream, (CElement *)this);
}


void
CLlrpOrgCustomParameter5::assimilateSubParameters (
  CErrorDetails *               pError)
{
    tListOfParameters::iterator Cur = m_listAllSubParameters.begin();
    tListOfParameters::iterator End = m_listAllSubParameters.end();
    const CTypeDescriptor *     pType;

  

    // 0-1 of LlrpOrgCustomParameter1
    pType = &CLlrpOrgCustomParameter1::s_typeDescriptor;
  
    if(Cur != End && (*Cur)->m_pType == pType)
    {
        m_pLlrpOrgCustomParameter1 = (CLlrpOrgCustomParameter1 *)*Cur++;
    }
    

    // 1 of LLRPStatus
    pType = &CLLRPStatus::s_typeDescriptor;
  
    if(Cur == End || (*Cur)->m_pType != pType)
    {
        goto missing;
    }
    m_pLLRPStatus = (CLLRPStatus *)*Cur++;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(Cur != End && (*Cur)->isAllowedExtension(&s_typeDescriptor))
    {
        m_listCustom.push_back(*Cur);
        Cur++;
    }
    

    if(Cur != End)
    {
        pError->unexpectedParameter(*Cur);
    }

    return;

  missing:
    pError->missingParameter(pType);
}


EResultCode
CLlrpOrgCustomParameter5::setLlrpOrgCustomParameter1 (
  CLlrpOrgCustomParameter1 *     pValue)
{
    removeSubParameterFromAllList(m_pLlrpOrgCustomParameter1);
    delete m_pLlrpOrgCustomParameter1;
    m_pLlrpOrgCustomParameter1 = pValue;
    addSubParameterToAllList(pValue);
    return RC_OK;
}

EResultCode
CLlrpOrgCustomParameter5::setLLRPStatus (
  CLLRPStatus *     pValue)
{
    removeSubParameterFromAllList(m_pLLRPStatus);
    delete m_pLLRPStatus;
    m_pLLRPStatus = pValue;
    addSubParameterToAllList(pValue);
    return RC_OK;
}

EResultCode
CLlrpOrgCustomParameter5::addCustom (
  CParameter *                  pValue)
{
    if(!pValue->isAllowedIn(&s_typeDescriptor))
    {
        return RC_NotAllowedAtExtensionPoint;
    }

    m_listCustom.push_back(pValue);
    addSubParameterToAllList(pValue);
    return RC_OK;
}

void
CLlrpOrgCustomParameter5::encode (
  CEncoderStream *              pEncoderStream) const
{
    const CTypeDescriptor *     pType;

  
    pType = &CLlrpOrgCustomParameter1::s_typeDescriptor;
      
    pEncoderStream->putOptionalSubParameter(m_pLlrpOrgCustomParameter1, pType);
      
    pType = &CLLRPStatus::s_typeDescriptor;
      
    pEncoderStream->putRequiredSubParameter(m_pLLRPStatus, pType);
      
    pType = &CCustom::s_typeDescriptor;
      
    pEncoderStream->putOptionalSubParameterList((tListOfParameters *) &m_listCustom, pType);
      
}



llrp_bool_t
CLlrpOrgCustomParameter5::isAllowedIn (
  const CTypeDescriptor *       pEnclosingElementType) const
{
  
    if(pEnclosingElementType == &CLlrpOrgCustomParameter4::s_typeDescriptor)
    {
        return TRUE;
    }
  
    return FALSE;
}




/*
*****************************************************************
**
** Choice LlrpOrgCustomChoice1
**
*****************************************************************
*/
  

const CTypeDescriptor
CLlrpOrgCustomChoice1::s_typeDescriptor =
{
    FALSE,		// m_bIsMessage
    "LlrpOrgCustomChoice1",	// m_pName
    NULL,	// m_pVendorDescriptor
    NULL,	// m_pNamespaceDescriptor
    (llrp_u32_t)(-1),	// m_TypeNum
    NULL,   // m_ppFieldDescriptorTable
    NULL,                // m_pfConstruct
    NULL,             // m_pfDecodeFields
};

llrp_bool_t
CLlrpOrgCustomChoice1::isMember (
  CParameter *                  pParameter)
{
    const CTypeDescriptor *     pType;

    pType = pParameter->m_pType;

  
    if(&CLlrpOrgCustomParameter1::s_typeDescriptor == pType)
    {
        return TRUE;
    }
      
    if(&CLlrpOrgCustomParameter2::s_typeDescriptor == pType)
    {
        return TRUE;
    }
      
    if(&CC1G2Read::s_typeDescriptor == pType)
    {
        return TRUE;
    }
      
    if(&CC1G2Write::s_typeDescriptor == pType)
    {
        return TRUE;
    }
      
    if(&CC1G2Kill::s_typeDescriptor == pType)
    {
        return TRUE;
    }
      
    if(&CC1G2Lock::s_typeDescriptor == pType)
    {
        return TRUE;
    }
      
    if(&CC1G2BlockErase::s_typeDescriptor == pType)
    {
        return TRUE;
    }
      
    if(&CC1G2BlockWrite::s_typeDescriptor == pType)
    {
        return TRUE;
    }
      

    return FALSE;
}


void
enrollLLRPOrgTypesIntoRegistry (
  CTypeRegistry *               pTypeRegistry)
{
  
    pTypeRegistry->enroll(&CLLRPORG_VENDOR_MESSAGE_1::s_typeDescriptor);
  
    pTypeRegistry->enroll(&CLlrpOrgCustomParameter1::s_typeDescriptor);
  
    pTypeRegistry->enroll(&CLLRPORG_VENDOR_MESSAGE_2::s_typeDescriptor);
  
    pTypeRegistry->enroll(&CLlrpOrgCustomParameter2::s_typeDescriptor);
  
    pTypeRegistry->enroll(&CLLRPORG_VENDOR_MESSAGE_3::s_typeDescriptor);
  
    pTypeRegistry->enroll(&CLlrpOrgCustomParameter3::s_typeDescriptor);
  
    pTypeRegistry->enroll(&CLLRPORG_VENDOR_MESSAGE_4::s_typeDescriptor);
  
    pTypeRegistry->enroll(&CLlrpOrgCustomParameter4::s_typeDescriptor);
  
    pTypeRegistry->enroll(&CLlrpOrgCustomParameter5::s_typeDescriptor);
  
}
